// This file was generated by counterfeiter
package fakes

import (
	"autoscaler/db"
	"autoscaler/models"
	"database/sql"
	"sync"
)

type FakeScalingEngineDB struct {
	GetDBStatusStub        func() sql.DBStats
	getDBStatusMutex       sync.RWMutex
	getDBStatusArgsForCall []struct{}
	getDBStatusReturns     struct {
		result1 sql.DBStats
	}
	SaveScalingHistoryStub        func(history *models.AppScalingHistory) error
	saveScalingHistoryMutex       sync.RWMutex
	saveScalingHistoryArgsForCall []struct {
		history *models.AppScalingHistory
	}
	saveScalingHistoryReturns struct {
		result1 error
	}
	RetrieveScalingHistoriesStub        func(appId string, start int64, end int64, orderType db.OrderType, includeAll bool) ([]*models.AppScalingHistory, error)
	retrieveScalingHistoriesMutex       sync.RWMutex
	retrieveScalingHistoriesArgsForCall []struct {
		appId      string
		start      int64
		end        int64
		orderType  db.OrderType
		includeAll bool
	}
	retrieveScalingHistoriesReturns struct {
		result1 []*models.AppScalingHistory
		result2 error
	}
	PruneScalingHistoriesStub        func(before int64) error
	pruneScalingHistoriesMutex       sync.RWMutex
	pruneScalingHistoriesArgsForCall []struct {
		before int64
	}
	pruneScalingHistoriesReturns struct {
		result1 error
	}
	UpdateScalingCooldownExpireTimeStub        func(appId string, expireAt int64) error
	updateScalingCooldownExpireTimeMutex       sync.RWMutex
	updateScalingCooldownExpireTimeArgsForCall []struct {
		appId    string
		expireAt int64
	}
	updateScalingCooldownExpireTimeReturns struct {
		result1 error
	}
	CanScaleAppStub        func(appId string) (bool, int64, error)
	canScaleAppMutex       sync.RWMutex
	canScaleAppArgsForCall []struct {
		appId string
	}
	canScaleAppReturns struct {
		result1 bool
		result2 int64
		result3 error
	}
	GetActiveScheduleStub        func(appId string) (*models.ActiveSchedule, error)
	getActiveScheduleMutex       sync.RWMutex
	getActiveScheduleArgsForCall []struct {
		appId string
	}
	getActiveScheduleReturns struct {
		result1 *models.ActiveSchedule
		result2 error
	}
	GetActiveSchedulesStub        func() (map[string]string, error)
	getActiveSchedulesMutex       sync.RWMutex
	getActiveSchedulesArgsForCall []struct{}
	getActiveSchedulesReturns     struct {
		result1 map[string]string
		result2 error
	}
	SetActiveScheduleStub        func(appId string, schedule *models.ActiveSchedule) error
	setActiveScheduleMutex       sync.RWMutex
	setActiveScheduleArgsForCall []struct {
		appId    string
		schedule *models.ActiveSchedule
	}
	setActiveScheduleReturns struct {
		result1 error
	}
	RemoveActiveScheduleStub        func(appId string) error
	removeActiveScheduleMutex       sync.RWMutex
	removeActiveScheduleArgsForCall []struct {
		appId string
	}
	removeActiveScheduleReturns struct {
		result1 error
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct{}
	closeReturns     struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeScalingEngineDB) GetDBStatus() sql.DBStats {
	fake.getDBStatusMutex.Lock()
	fake.getDBStatusArgsForCall = append(fake.getDBStatusArgsForCall, struct{}{})
	fake.recordInvocation("GetDBStatus", []interface{}{})
	fake.getDBStatusMutex.Unlock()
	if fake.GetDBStatusStub != nil {
		return fake.GetDBStatusStub()
	}
	return fake.getDBStatusReturns.result1
}

func (fake *FakeScalingEngineDB) GetDBStatusCallCount() int {
	fake.getDBStatusMutex.RLock()
	defer fake.getDBStatusMutex.RUnlock()
	return len(fake.getDBStatusArgsForCall)
}

func (fake *FakeScalingEngineDB) GetDBStatusReturns(result1 sql.DBStats) {
	fake.GetDBStatusStub = nil
	fake.getDBStatusReturns = struct {
		result1 sql.DBStats
	}{result1}
}

func (fake *FakeScalingEngineDB) SaveScalingHistory(history *models.AppScalingHistory) error {
	fake.saveScalingHistoryMutex.Lock()
	fake.saveScalingHistoryArgsForCall = append(fake.saveScalingHistoryArgsForCall, struct {
		history *models.AppScalingHistory
	}{history})
	fake.recordInvocation("SaveScalingHistory", []interface{}{history})
	fake.saveScalingHistoryMutex.Unlock()
	if fake.SaveScalingHistoryStub != nil {
		return fake.SaveScalingHistoryStub(history)
	}
	return fake.saveScalingHistoryReturns.result1
}

func (fake *FakeScalingEngineDB) SaveScalingHistoryCallCount() int {
	fake.saveScalingHistoryMutex.RLock()
	defer fake.saveScalingHistoryMutex.RUnlock()
	return len(fake.saveScalingHistoryArgsForCall)
}

func (fake *FakeScalingEngineDB) SaveScalingHistoryArgsForCall(i int) *models.AppScalingHistory {
	fake.saveScalingHistoryMutex.RLock()
	defer fake.saveScalingHistoryMutex.RUnlock()
	return fake.saveScalingHistoryArgsForCall[i].history
}

func (fake *FakeScalingEngineDB) SaveScalingHistoryReturns(result1 error) {
	fake.SaveScalingHistoryStub = nil
	fake.saveScalingHistoryReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeScalingEngineDB) RetrieveScalingHistories(appId string, start int64, end int64, orderType db.OrderType, includeAll bool) ([]*models.AppScalingHistory, error) {
	fake.retrieveScalingHistoriesMutex.Lock()
	fake.retrieveScalingHistoriesArgsForCall = append(fake.retrieveScalingHistoriesArgsForCall, struct {
		appId      string
		start      int64
		end        int64
		orderType  db.OrderType
		includeAll bool
	}{appId, start, end, orderType, includeAll})
	fake.recordInvocation("RetrieveScalingHistories", []interface{}{appId, start, end, orderType, includeAll})
	fake.retrieveScalingHistoriesMutex.Unlock()
	if fake.RetrieveScalingHistoriesStub != nil {
		return fake.RetrieveScalingHistoriesStub(appId, start, end, orderType, includeAll)
	}
	return fake.retrieveScalingHistoriesReturns.result1, fake.retrieveScalingHistoriesReturns.result2
}

func (fake *FakeScalingEngineDB) RetrieveScalingHistoriesCallCount() int {
	fake.retrieveScalingHistoriesMutex.RLock()
	defer fake.retrieveScalingHistoriesMutex.RUnlock()
	return len(fake.retrieveScalingHistoriesArgsForCall)
}

func (fake *FakeScalingEngineDB) RetrieveScalingHistoriesArgsForCall(i int) (string, int64, int64, db.OrderType, bool) {
	fake.retrieveScalingHistoriesMutex.RLock()
	defer fake.retrieveScalingHistoriesMutex.RUnlock()
	return fake.retrieveScalingHistoriesArgsForCall[i].appId, fake.retrieveScalingHistoriesArgsForCall[i].start, fake.retrieveScalingHistoriesArgsForCall[i].end, fake.retrieveScalingHistoriesArgsForCall[i].orderType, fake.retrieveScalingHistoriesArgsForCall[i].includeAll
}

func (fake *FakeScalingEngineDB) RetrieveScalingHistoriesReturns(result1 []*models.AppScalingHistory, result2 error) {
	fake.RetrieveScalingHistoriesStub = nil
	fake.retrieveScalingHistoriesReturns = struct {
		result1 []*models.AppScalingHistory
		result2 error
	}{result1, result2}
}

func (fake *FakeScalingEngineDB) PruneScalingHistories(before int64) error {
	fake.pruneScalingHistoriesMutex.Lock()
	fake.pruneScalingHistoriesArgsForCall = append(fake.pruneScalingHistoriesArgsForCall, struct {
		before int64
	}{before})
	fake.recordInvocation("PruneScalingHistories", []interface{}{before})
	fake.pruneScalingHistoriesMutex.Unlock()
	if fake.PruneScalingHistoriesStub != nil {
		return fake.PruneScalingHistoriesStub(before)
	}
	return fake.pruneScalingHistoriesReturns.result1
}

func (fake *FakeScalingEngineDB) PruneScalingHistoriesCallCount() int {
	fake.pruneScalingHistoriesMutex.RLock()
	defer fake.pruneScalingHistoriesMutex.RUnlock()
	return len(fake.pruneScalingHistoriesArgsForCall)
}

func (fake *FakeScalingEngineDB) PruneScalingHistoriesArgsForCall(i int) int64 {
	fake.pruneScalingHistoriesMutex.RLock()
	defer fake.pruneScalingHistoriesMutex.RUnlock()
	return fake.pruneScalingHistoriesArgsForCall[i].before
}

func (fake *FakeScalingEngineDB) PruneScalingHistoriesReturns(result1 error) {
	fake.PruneScalingHistoriesStub = nil
	fake.pruneScalingHistoriesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeScalingEngineDB) UpdateScalingCooldownExpireTime(appId string, expireAt int64) error {
	fake.updateScalingCooldownExpireTimeMutex.Lock()
	fake.updateScalingCooldownExpireTimeArgsForCall = append(fake.updateScalingCooldownExpireTimeArgsForCall, struct {
		appId    string
		expireAt int64
	}{appId, expireAt})
	fake.recordInvocation("UpdateScalingCooldownExpireTime", []interface{}{appId, expireAt})
	fake.updateScalingCooldownExpireTimeMutex.Unlock()
	if fake.UpdateScalingCooldownExpireTimeStub != nil {
		return fake.UpdateScalingCooldownExpireTimeStub(appId, expireAt)
	}
	return fake.updateScalingCooldownExpireTimeReturns.result1
}

func (fake *FakeScalingEngineDB) UpdateScalingCooldownExpireTimeCallCount() int {
	fake.updateScalingCooldownExpireTimeMutex.RLock()
	defer fake.updateScalingCooldownExpireTimeMutex.RUnlock()
	return len(fake.updateScalingCooldownExpireTimeArgsForCall)
}

func (fake *FakeScalingEngineDB) UpdateScalingCooldownExpireTimeArgsForCall(i int) (string, int64) {
	fake.updateScalingCooldownExpireTimeMutex.RLock()
	defer fake.updateScalingCooldownExpireTimeMutex.RUnlock()
	return fake.updateScalingCooldownExpireTimeArgsForCall[i].appId, fake.updateScalingCooldownExpireTimeArgsForCall[i].expireAt
}

func (fake *FakeScalingEngineDB) UpdateScalingCooldownExpireTimeReturns(result1 error) {
	fake.UpdateScalingCooldownExpireTimeStub = nil
	fake.updateScalingCooldownExpireTimeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeScalingEngineDB) CanScaleApp(appId string) (bool, int64, error) {
	fake.canScaleAppMutex.Lock()
	fake.canScaleAppArgsForCall = append(fake.canScaleAppArgsForCall, struct {
		appId string
	}{appId})
	fake.recordInvocation("CanScaleApp", []interface{}{appId})
	fake.canScaleAppMutex.Unlock()
	if fake.CanScaleAppStub != nil {
		return fake.CanScaleAppStub(appId)
	}
	return fake.canScaleAppReturns.result1, fake.canScaleAppReturns.result2, fake.canScaleAppReturns.result3
}

func (fake *FakeScalingEngineDB) CanScaleAppCallCount() int {
	fake.canScaleAppMutex.RLock()
	defer fake.canScaleAppMutex.RUnlock()
	return len(fake.canScaleAppArgsForCall)
}

func (fake *FakeScalingEngineDB) CanScaleAppArgsForCall(i int) string {
	fake.canScaleAppMutex.RLock()
	defer fake.canScaleAppMutex.RUnlock()
	return fake.canScaleAppArgsForCall[i].appId
}

func (fake *FakeScalingEngineDB) CanScaleAppReturns(result1 bool, result2 int64, result3 error) {
	fake.CanScaleAppStub = nil
	fake.canScaleAppReturns = struct {
		result1 bool
		result2 int64
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeScalingEngineDB) GetActiveSchedule(appId string) (*models.ActiveSchedule, error) {
	fake.getActiveScheduleMutex.Lock()
	fake.getActiveScheduleArgsForCall = append(fake.getActiveScheduleArgsForCall, struct {
		appId string
	}{appId})
	fake.recordInvocation("GetActiveSchedule", []interface{}{appId})
	fake.getActiveScheduleMutex.Unlock()
	if fake.GetActiveScheduleStub != nil {
		return fake.GetActiveScheduleStub(appId)
	}
	return fake.getActiveScheduleReturns.result1, fake.getActiveScheduleReturns.result2
}

func (fake *FakeScalingEngineDB) GetActiveScheduleCallCount() int {
	fake.getActiveScheduleMutex.RLock()
	defer fake.getActiveScheduleMutex.RUnlock()
	return len(fake.getActiveScheduleArgsForCall)
}

func (fake *FakeScalingEngineDB) GetActiveScheduleArgsForCall(i int) string {
	fake.getActiveScheduleMutex.RLock()
	defer fake.getActiveScheduleMutex.RUnlock()
	return fake.getActiveScheduleArgsForCall[i].appId
}

func (fake *FakeScalingEngineDB) GetActiveScheduleReturns(result1 *models.ActiveSchedule, result2 error) {
	fake.GetActiveScheduleStub = nil
	fake.getActiveScheduleReturns = struct {
		result1 *models.ActiveSchedule
		result2 error
	}{result1, result2}
}

func (fake *FakeScalingEngineDB) GetActiveSchedules() (map[string]string, error) {
	fake.getActiveSchedulesMutex.Lock()
	fake.getActiveSchedulesArgsForCall = append(fake.getActiveSchedulesArgsForCall, struct{}{})
	fake.recordInvocation("GetActiveSchedules", []interface{}{})
	fake.getActiveSchedulesMutex.Unlock()
	if fake.GetActiveSchedulesStub != nil {
		return fake.GetActiveSchedulesStub()
	}
	return fake.getActiveSchedulesReturns.result1, fake.getActiveSchedulesReturns.result2
}

func (fake *FakeScalingEngineDB) GetActiveSchedulesCallCount() int {
	fake.getActiveSchedulesMutex.RLock()
	defer fake.getActiveSchedulesMutex.RUnlock()
	return len(fake.getActiveSchedulesArgsForCall)
}

func (fake *FakeScalingEngineDB) GetActiveSchedulesReturns(result1 map[string]string, result2 error) {
	fake.GetActiveSchedulesStub = nil
	fake.getActiveSchedulesReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeScalingEngineDB) SetActiveSchedule(appId string, schedule *models.ActiveSchedule) error {
	fake.setActiveScheduleMutex.Lock()
	fake.setActiveScheduleArgsForCall = append(fake.setActiveScheduleArgsForCall, struct {
		appId    string
		schedule *models.ActiveSchedule
	}{appId, schedule})
	fake.recordInvocation("SetActiveSchedule", []interface{}{appId, schedule})
	fake.setActiveScheduleMutex.Unlock()
	if fake.SetActiveScheduleStub != nil {
		return fake.SetActiveScheduleStub(appId, schedule)
	}
	return fake.setActiveScheduleReturns.result1
}

func (fake *FakeScalingEngineDB) SetActiveScheduleCallCount() int {
	fake.setActiveScheduleMutex.RLock()
	defer fake.setActiveScheduleMutex.RUnlock()
	return len(fake.setActiveScheduleArgsForCall)
}

func (fake *FakeScalingEngineDB) SetActiveScheduleArgsForCall(i int) (string, *models.ActiveSchedule) {
	fake.setActiveScheduleMutex.RLock()
	defer fake.setActiveScheduleMutex.RUnlock()
	return fake.setActiveScheduleArgsForCall[i].appId, fake.setActiveScheduleArgsForCall[i].schedule
}

func (fake *FakeScalingEngineDB) SetActiveScheduleReturns(result1 error) {
	fake.SetActiveScheduleStub = nil
	fake.setActiveScheduleReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeScalingEngineDB) RemoveActiveSchedule(appId string) error {
	fake.removeActiveScheduleMutex.Lock()
	fake.removeActiveScheduleArgsForCall = append(fake.removeActiveScheduleArgsForCall, struct {
		appId string
	}{appId})
	fake.recordInvocation("RemoveActiveSchedule", []interface{}{appId})
	fake.removeActiveScheduleMutex.Unlock()
	if fake.RemoveActiveScheduleStub != nil {
		return fake.RemoveActiveScheduleStub(appId)
	}
	return fake.removeActiveScheduleReturns.result1
}

func (fake *FakeScalingEngineDB) RemoveActiveScheduleCallCount() int {
	fake.removeActiveScheduleMutex.RLock()
	defer fake.removeActiveScheduleMutex.RUnlock()
	return len(fake.removeActiveScheduleArgsForCall)
}

func (fake *FakeScalingEngineDB) RemoveActiveScheduleArgsForCall(i int) string {
	fake.removeActiveScheduleMutex.RLock()
	defer fake.removeActiveScheduleMutex.RUnlock()
	return fake.removeActiveScheduleArgsForCall[i].appId
}

func (fake *FakeScalingEngineDB) RemoveActiveScheduleReturns(result1 error) {
	fake.RemoveActiveScheduleStub = nil
	fake.removeActiveScheduleReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeScalingEngineDB) Close() error {
	fake.closeMutex.Lock()
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct{}{})
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	}
	return fake.closeReturns.result1
}

func (fake *FakeScalingEngineDB) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeScalingEngineDB) CloseReturns(result1 error) {
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeScalingEngineDB) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getDBStatusMutex.RLock()
	defer fake.getDBStatusMutex.RUnlock()
	fake.saveScalingHistoryMutex.RLock()
	defer fake.saveScalingHistoryMutex.RUnlock()
	fake.retrieveScalingHistoriesMutex.RLock()
	defer fake.retrieveScalingHistoriesMutex.RUnlock()
	fake.pruneScalingHistoriesMutex.RLock()
	defer fake.pruneScalingHistoriesMutex.RUnlock()
	fake.updateScalingCooldownExpireTimeMutex.RLock()
	defer fake.updateScalingCooldownExpireTimeMutex.RUnlock()
	fake.canScaleAppMutex.RLock()
	defer fake.canScaleAppMutex.RUnlock()
	fake.getActiveScheduleMutex.RLock()
	defer fake.getActiveScheduleMutex.RUnlock()
	fake.getActiveSchedulesMutex.RLock()
	defer fake.getActiveSchedulesMutex.RUnlock()
	fake.setActiveScheduleMutex.RLock()
	defer fake.setActiveScheduleMutex.RUnlock()
	fake.removeActiveScheduleMutex.RLock()
	defer fake.removeActiveScheduleMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeScalingEngineDB) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.ScalingEngineDB = new(FakeScalingEngineDB)
