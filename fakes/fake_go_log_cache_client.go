// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/app-autoscaler/src/autoscaler/eventgenerator/client"
	clienta "code.cloudfoundry.org/go-log-cache"
	"google.golang.org/grpc"
)

type FakeGoLogCacheClient struct {
	NewClientStub        func(string, ...clienta.ClientOption) *clienta.Client
	newClientMutex       sync.RWMutex
	newClientArgsForCall []struct {
		arg1 string
		arg2 []clienta.ClientOption
	}
	newClientReturns struct {
		result1 *clienta.Client
	}
	newClientReturnsOnCall map[int]struct {
		result1 *clienta.Client
	}
	WithViaGRPCStub        func(...grpc.DialOption) clienta.ClientOption
	withViaGRPCMutex       sync.RWMutex
	withViaGRPCArgsForCall []struct {
		arg1 []grpc.DialOption
	}
	withViaGRPCReturns struct {
		result1 clienta.ClientOption
	}
	withViaGRPCReturnsOnCall map[int]struct {
		result1 clienta.ClientOption
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGoLogCacheClient) NewClient(arg1 string, arg2 ...clienta.ClientOption) *clienta.Client {
	fake.newClientMutex.Lock()
	ret, specificReturn := fake.newClientReturnsOnCall[len(fake.newClientArgsForCall)]
	fake.newClientArgsForCall = append(fake.newClientArgsForCall, struct {
		arg1 string
		arg2 []clienta.ClientOption
	}{arg1, arg2})
	stub := fake.NewClientStub
	fakeReturns := fake.newClientReturns
	fake.recordInvocation("NewClient", []interface{}{arg1, arg2})
	fake.newClientMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGoLogCacheClient) NewClientCallCount() int {
	fake.newClientMutex.RLock()
	defer fake.newClientMutex.RUnlock()
	return len(fake.newClientArgsForCall)
}

func (fake *FakeGoLogCacheClient) NewClientCalls(stub func(string, ...clienta.ClientOption) *clienta.Client) {
	fake.newClientMutex.Lock()
	defer fake.newClientMutex.Unlock()
	fake.NewClientStub = stub
}

func (fake *FakeGoLogCacheClient) NewClientArgsForCall(i int) (string, []clienta.ClientOption) {
	fake.newClientMutex.RLock()
	defer fake.newClientMutex.RUnlock()
	argsForCall := fake.newClientArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeGoLogCacheClient) NewClientReturns(result1 *clienta.Client) {
	fake.newClientMutex.Lock()
	defer fake.newClientMutex.Unlock()
	fake.NewClientStub = nil
	fake.newClientReturns = struct {
		result1 *clienta.Client
	}{result1}
}

func (fake *FakeGoLogCacheClient) NewClientReturnsOnCall(i int, result1 *clienta.Client) {
	fake.newClientMutex.Lock()
	defer fake.newClientMutex.Unlock()
	fake.NewClientStub = nil
	if fake.newClientReturnsOnCall == nil {
		fake.newClientReturnsOnCall = make(map[int]struct {
			result1 *clienta.Client
		})
	}
	fake.newClientReturnsOnCall[i] = struct {
		result1 *clienta.Client
	}{result1}
}

func (fake *FakeGoLogCacheClient) WithViaGRPC(arg1 ...grpc.DialOption) clienta.ClientOption {
	fake.withViaGRPCMutex.Lock()
	ret, specificReturn := fake.withViaGRPCReturnsOnCall[len(fake.withViaGRPCArgsForCall)]
	fake.withViaGRPCArgsForCall = append(fake.withViaGRPCArgsForCall, struct {
		arg1 []grpc.DialOption
	}{arg1})
	stub := fake.WithViaGRPCStub
	fakeReturns := fake.withViaGRPCReturns
	fake.recordInvocation("WithViaGRPC", []interface{}{arg1})
	fake.withViaGRPCMutex.Unlock()
	if stub != nil {
		return stub(arg1...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGoLogCacheClient) WithViaGRPCCallCount() int {
	fake.withViaGRPCMutex.RLock()
	defer fake.withViaGRPCMutex.RUnlock()
	return len(fake.withViaGRPCArgsForCall)
}

func (fake *FakeGoLogCacheClient) WithViaGRPCCalls(stub func(...grpc.DialOption) clienta.ClientOption) {
	fake.withViaGRPCMutex.Lock()
	defer fake.withViaGRPCMutex.Unlock()
	fake.WithViaGRPCStub = stub
}

func (fake *FakeGoLogCacheClient) WithViaGRPCArgsForCall(i int) []grpc.DialOption {
	fake.withViaGRPCMutex.RLock()
	defer fake.withViaGRPCMutex.RUnlock()
	argsForCall := fake.withViaGRPCArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeGoLogCacheClient) WithViaGRPCReturns(result1 clienta.ClientOption) {
	fake.withViaGRPCMutex.Lock()
	defer fake.withViaGRPCMutex.Unlock()
	fake.WithViaGRPCStub = nil
	fake.withViaGRPCReturns = struct {
		result1 clienta.ClientOption
	}{result1}
}

func (fake *FakeGoLogCacheClient) WithViaGRPCReturnsOnCall(i int, result1 clienta.ClientOption) {
	fake.withViaGRPCMutex.Lock()
	defer fake.withViaGRPCMutex.Unlock()
	fake.WithViaGRPCStub = nil
	if fake.withViaGRPCReturnsOnCall == nil {
		fake.withViaGRPCReturnsOnCall = make(map[int]struct {
			result1 clienta.ClientOption
		})
	}
	fake.withViaGRPCReturnsOnCall[i] = struct {
		result1 clienta.ClientOption
	}{result1}
}

func (fake *FakeGoLogCacheClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newClientMutex.RLock()
	defer fake.newClientMutex.RUnlock()
	fake.withViaGRPCMutex.RLock()
	defer fake.withViaGRPCMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGoLogCacheClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ client.GoLogCacheClient = new(FakeGoLogCacheClient)
