// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials"
)

type FakeGrpcDialOptions struct {
	WithTransportCredentialsStub        func(credentials.TransportCredentials) grpc.DialOption
	withTransportCredentialsMutex       sync.RWMutex
	withTransportCredentialsArgsForCall []struct {
		arg1 credentials.TransportCredentials
	}
	withTransportCredentialsReturns struct {
		result1 grpc.DialOption
	}
	withTransportCredentialsReturnsOnCall map[int]struct {
		result1 grpc.DialOption
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGrpcDialOptions) WithTransportCredentials(arg1 credentials.TransportCredentials) grpc.DialOption {
	fake.withTransportCredentialsMutex.Lock()
	ret, specificReturn := fake.withTransportCredentialsReturnsOnCall[len(fake.withTransportCredentialsArgsForCall)]
	fake.withTransportCredentialsArgsForCall = append(fake.withTransportCredentialsArgsForCall, struct {
		arg1 credentials.TransportCredentials
	}{arg1})
	stub := fake.WithTransportCredentialsStub
	fakeReturns := fake.withTransportCredentialsReturns
	fake.recordInvocation("WithTransportCredentials", []interface{}{arg1})
	fake.withTransportCredentialsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGrpcDialOptions) WithTransportCredentialsCallCount() int {
	fake.withTransportCredentialsMutex.RLock()
	defer fake.withTransportCredentialsMutex.RUnlock()
	return len(fake.withTransportCredentialsArgsForCall)
}

func (fake *FakeGrpcDialOptions) WithTransportCredentialsCalls(stub func(credentials.TransportCredentials) grpc.DialOption) {
	fake.withTransportCredentialsMutex.Lock()
	defer fake.withTransportCredentialsMutex.Unlock()
	fake.WithTransportCredentialsStub = stub
}

func (fake *FakeGrpcDialOptions) WithTransportCredentialsArgsForCall(i int) credentials.TransportCredentials {
	fake.withTransportCredentialsMutex.RLock()
	defer fake.withTransportCredentialsMutex.RUnlock()
	argsForCall := fake.withTransportCredentialsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeGrpcDialOptions) WithTransportCredentialsReturns(result1 grpc.DialOption) {
	fake.withTransportCredentialsMutex.Lock()
	defer fake.withTransportCredentialsMutex.Unlock()
	fake.WithTransportCredentialsStub = nil
	fake.withTransportCredentialsReturns = struct {
		result1 grpc.DialOption
	}{result1}
}

func (fake *FakeGrpcDialOptions) WithTransportCredentialsReturnsOnCall(i int, result1 grpc.DialOption) {
	fake.withTransportCredentialsMutex.Lock()
	defer fake.withTransportCredentialsMutex.Unlock()
	fake.WithTransportCredentialsStub = nil
	if fake.withTransportCredentialsReturnsOnCall == nil {
		fake.withTransportCredentialsReturnsOnCall = make(map[int]struct {
			result1 grpc.DialOption
		})
	}
	fake.withTransportCredentialsReturnsOnCall[i] = struct {
		result1 grpc.DialOption
	}{result1}
}

func (fake *FakeGrpcDialOptions) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.withTransportCredentialsMutex.RLock()
	defer fake.withTransportCredentialsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGrpcDialOptions) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
