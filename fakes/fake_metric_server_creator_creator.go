// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"net/http"
	"sync"

	"code.cloudfoundry.org/app-autoscaler/src/autoscaler/eventgenerator/client"
	lager "code.cloudfoundry.org/lager/v3"
)

type FakeMetricServerClientCreator struct {
	NewMetricServerClientStub        func(lager.Logger, string, *http.Client) client.MetricClient
	newMetricServerClientMutex       sync.RWMutex
	newMetricServerClientArgsForCall []struct {
		arg1 lager.Logger
		arg2 string
		arg3 *http.Client
	}
	newMetricServerClientReturns struct {
		result1 client.MetricClient
	}
	newMetricServerClientReturnsOnCall map[int]struct {
		result1 client.MetricClient
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMetricServerClientCreator) NewMetricServerClient(arg1 lager.Logger, arg2 string, arg3 *http.Client) client.MetricClient {
	fake.newMetricServerClientMutex.Lock()
	ret, specificReturn := fake.newMetricServerClientReturnsOnCall[len(fake.newMetricServerClientArgsForCall)]
	fake.newMetricServerClientArgsForCall = append(fake.newMetricServerClientArgsForCall, struct {
		arg1 lager.Logger
		arg2 string
		arg3 *http.Client
	}{arg1, arg2, arg3})
	stub := fake.NewMetricServerClientStub
	fakeReturns := fake.newMetricServerClientReturns
	fake.recordInvocation("NewMetricServerClient", []interface{}{arg1, arg2, arg3})
	fake.newMetricServerClientMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeMetricServerClientCreator) NewMetricServerClientCallCount() int {
	fake.newMetricServerClientMutex.RLock()
	defer fake.newMetricServerClientMutex.RUnlock()
	return len(fake.newMetricServerClientArgsForCall)
}

func (fake *FakeMetricServerClientCreator) NewMetricServerClientCalls(stub func(lager.Logger, string, *http.Client) client.MetricClient) {
	fake.newMetricServerClientMutex.Lock()
	defer fake.newMetricServerClientMutex.Unlock()
	fake.NewMetricServerClientStub = stub
}

func (fake *FakeMetricServerClientCreator) NewMetricServerClientArgsForCall(i int) (lager.Logger, string, *http.Client) {
	fake.newMetricServerClientMutex.RLock()
	defer fake.newMetricServerClientMutex.RUnlock()
	argsForCall := fake.newMetricServerClientArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeMetricServerClientCreator) NewMetricServerClientReturns(result1 client.MetricClient) {
	fake.newMetricServerClientMutex.Lock()
	defer fake.newMetricServerClientMutex.Unlock()
	fake.NewMetricServerClientStub = nil
	fake.newMetricServerClientReturns = struct {
		result1 client.MetricClient
	}{result1}
}

func (fake *FakeMetricServerClientCreator) NewMetricServerClientReturnsOnCall(i int, result1 client.MetricClient) {
	fake.newMetricServerClientMutex.Lock()
	defer fake.newMetricServerClientMutex.Unlock()
	fake.NewMetricServerClientStub = nil
	if fake.newMetricServerClientReturnsOnCall == nil {
		fake.newMetricServerClientReturnsOnCall = make(map[int]struct {
			result1 client.MetricClient
		})
	}
	fake.newMetricServerClientReturnsOnCall[i] = struct {
		result1 client.MetricClient
	}{result1}
}

func (fake *FakeMetricServerClientCreator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newMetricServerClientMutex.RLock()
	defer fake.newMetricServerClientMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMetricServerClientCreator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ client.MetricServerClientCreator = new(FakeMetricServerClientCreator)
