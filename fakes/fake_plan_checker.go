// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/app-autoscaler/src/autoscaler/api/plancheck"
	"code.cloudfoundry.org/app-autoscaler/src/autoscaler/models"
)

type FakePlanChecker struct {
	CheckPlanStub        func(models.ScalingPolicy, string) (bool, string, error)
	checkPlanMutex       sync.RWMutex
	checkPlanArgsForCall []struct {
		arg1 models.ScalingPolicy
		arg2 string
	}
	checkPlanReturns struct {
		result1 bool
		result2 string
		result3 error
	}
	checkPlanReturnsOnCall map[int]struct {
		result1 bool
		result2 string
		result3 error
	}
	IsPlanUpdatableStub        func(string) (bool, error)
	isPlanUpdatableMutex       sync.RWMutex
	isPlanUpdatableArgsForCall []struct {
		arg1 string
	}
	isPlanUpdatableReturns struct {
		result1 bool
		result2 error
	}
	isPlanUpdatableReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePlanChecker) CheckPlan(arg1 models.ScalingPolicy, arg2 string) (bool, string, error) {
	fake.checkPlanMutex.Lock()
	ret, specificReturn := fake.checkPlanReturnsOnCall[len(fake.checkPlanArgsForCall)]
	fake.checkPlanArgsForCall = append(fake.checkPlanArgsForCall, struct {
		arg1 models.ScalingPolicy
		arg2 string
	}{arg1, arg2})
	stub := fake.CheckPlanStub
	fakeReturns := fake.checkPlanReturns
	fake.recordInvocation("CheckPlan", []interface{}{arg1, arg2})
	fake.checkPlanMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakePlanChecker) CheckPlanCallCount() int {
	fake.checkPlanMutex.RLock()
	defer fake.checkPlanMutex.RUnlock()
	return len(fake.checkPlanArgsForCall)
}

func (fake *FakePlanChecker) CheckPlanCalls(stub func(models.ScalingPolicy, string) (bool, string, error)) {
	fake.checkPlanMutex.Lock()
	defer fake.checkPlanMutex.Unlock()
	fake.CheckPlanStub = stub
}

func (fake *FakePlanChecker) CheckPlanArgsForCall(i int) (models.ScalingPolicy, string) {
	fake.checkPlanMutex.RLock()
	defer fake.checkPlanMutex.RUnlock()
	argsForCall := fake.checkPlanArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakePlanChecker) CheckPlanReturns(result1 bool, result2 string, result3 error) {
	fake.checkPlanMutex.Lock()
	defer fake.checkPlanMutex.Unlock()
	fake.CheckPlanStub = nil
	fake.checkPlanReturns = struct {
		result1 bool
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePlanChecker) CheckPlanReturnsOnCall(i int, result1 bool, result2 string, result3 error) {
	fake.checkPlanMutex.Lock()
	defer fake.checkPlanMutex.Unlock()
	fake.CheckPlanStub = nil
	if fake.checkPlanReturnsOnCall == nil {
		fake.checkPlanReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 string
			result3 error
		})
	}
	fake.checkPlanReturnsOnCall[i] = struct {
		result1 bool
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePlanChecker) IsPlanUpdatable(arg1 string) (bool, error) {
	fake.isPlanUpdatableMutex.Lock()
	ret, specificReturn := fake.isPlanUpdatableReturnsOnCall[len(fake.isPlanUpdatableArgsForCall)]
	fake.isPlanUpdatableArgsForCall = append(fake.isPlanUpdatableArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.IsPlanUpdatableStub
	fakeReturns := fake.isPlanUpdatableReturns
	fake.recordInvocation("IsPlanUpdatable", []interface{}{arg1})
	fake.isPlanUpdatableMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePlanChecker) IsPlanUpdatableCallCount() int {
	fake.isPlanUpdatableMutex.RLock()
	defer fake.isPlanUpdatableMutex.RUnlock()
	return len(fake.isPlanUpdatableArgsForCall)
}

func (fake *FakePlanChecker) IsPlanUpdatableCalls(stub func(string) (bool, error)) {
	fake.isPlanUpdatableMutex.Lock()
	defer fake.isPlanUpdatableMutex.Unlock()
	fake.IsPlanUpdatableStub = stub
}

func (fake *FakePlanChecker) IsPlanUpdatableArgsForCall(i int) string {
	fake.isPlanUpdatableMutex.RLock()
	defer fake.isPlanUpdatableMutex.RUnlock()
	argsForCall := fake.isPlanUpdatableArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePlanChecker) IsPlanUpdatableReturns(result1 bool, result2 error) {
	fake.isPlanUpdatableMutex.Lock()
	defer fake.isPlanUpdatableMutex.Unlock()
	fake.IsPlanUpdatableStub = nil
	fake.isPlanUpdatableReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakePlanChecker) IsPlanUpdatableReturnsOnCall(i int, result1 bool, result2 error) {
	fake.isPlanUpdatableMutex.Lock()
	defer fake.isPlanUpdatableMutex.Unlock()
	fake.IsPlanUpdatableStub = nil
	if fake.isPlanUpdatableReturnsOnCall == nil {
		fake.isPlanUpdatableReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.isPlanUpdatableReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakePlanChecker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.checkPlanMutex.RLock()
	defer fake.checkPlanMutex.RUnlock()
	fake.isPlanUpdatableMutex.RLock()
	defer fake.isPlanUpdatableMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePlanChecker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ plancheck.PlanChecker = new(FakePlanChecker)
