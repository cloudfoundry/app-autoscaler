// This file was generated by counterfeiter
package fakes

import (
	"autoscaler/db"
	"autoscaler/models"
	"database/sql"
	"sync"
)

type FakePolicyDB struct {
	GetDBStatusStub        func() sql.DBStats
	getDBStatusMutex       sync.RWMutex
	getDBStatusArgsForCall []struct{}
	getDBStatusReturns     struct {
		result1 sql.DBStats
	}
	GetAppIdsStub        func() (map[string]bool, error)
	getAppIdsMutex       sync.RWMutex
	getAppIdsArgsForCall []struct{}
	getAppIdsReturns     struct {
		result1 map[string]bool
		result2 error
	}
	GetAppPolicyStub        func(appId string) (*models.ScalingPolicy, error)
	getAppPolicyMutex       sync.RWMutex
	getAppPolicyArgsForCall []struct {
		appId string
	}
	getAppPolicyReturns struct {
		result1 *models.ScalingPolicy
		result2 error
	}
	SaveAppPolicyStub        func(appId string, policy string, policyGuid string) error
	saveAppPolicyMutex       sync.RWMutex
	saveAppPolicyArgsForCall []struct {
		appId      string
		policy     string
		policyGuid string
	}
	saveAppPolicyReturns struct {
		result1 error
	}
	RetrievePoliciesStub        func() ([]*models.PolicyJson, error)
	retrievePoliciesMutex       sync.RWMutex
	retrievePoliciesArgsForCall []struct{}
	retrievePoliciesReturns     struct {
		result1 []*models.PolicyJson
		result2 error
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct{}
	closeReturns     struct {
		result1 error
	}
	DeletePolicyStub        func(appId string) error
	deletePolicyMutex       sync.RWMutex
	deletePolicyArgsForCall []struct {
		appId string
	}
	deletePolicyReturns struct {
		result1 error
	}
	SaveCredentialStub        func(appId string, cred models.Credential) error
	saveCredentialMutex       sync.RWMutex
	saveCredentialArgsForCall []struct {
		appId string
		cred  models.Credential
	}
	saveCredentialReturns struct {
		result1 error
	}
	DeleteCredentialStub        func(appId string) error
	deleteCredentialMutex       sync.RWMutex
	deleteCredentialArgsForCall []struct {
		appId string
	}
	deleteCredentialReturns struct {
		result1 error
	}
	GetCredentialStub        func(appId string) (*models.Credential, error)
	getCredentialMutex       sync.RWMutex
	getCredentialArgsForCall []struct {
		appId string
	}
	getCredentialReturns struct {
		result1 *models.Credential
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePolicyDB) GetDBStatus() sql.DBStats {
	fake.getDBStatusMutex.Lock()
	fake.getDBStatusArgsForCall = append(fake.getDBStatusArgsForCall, struct{}{})
	fake.recordInvocation("GetDBStatus", []interface{}{})
	fake.getDBStatusMutex.Unlock()
	if fake.GetDBStatusStub != nil {
		return fake.GetDBStatusStub()
	}
	return fake.getDBStatusReturns.result1
}

func (fake *FakePolicyDB) GetDBStatusCallCount() int {
	fake.getDBStatusMutex.RLock()
	defer fake.getDBStatusMutex.RUnlock()
	return len(fake.getDBStatusArgsForCall)
}

func (fake *FakePolicyDB) GetDBStatusReturns(result1 sql.DBStats) {
	fake.GetDBStatusStub = nil
	fake.getDBStatusReturns = struct {
		result1 sql.DBStats
	}{result1}
}

func (fake *FakePolicyDB) GetAppIds() (map[string]bool, error) {
	fake.getAppIdsMutex.Lock()
	fake.getAppIdsArgsForCall = append(fake.getAppIdsArgsForCall, struct{}{})
	fake.recordInvocation("GetAppIds", []interface{}{})
	fake.getAppIdsMutex.Unlock()
	if fake.GetAppIdsStub != nil {
		return fake.GetAppIdsStub()
	}
	return fake.getAppIdsReturns.result1, fake.getAppIdsReturns.result2
}

func (fake *FakePolicyDB) GetAppIdsCallCount() int {
	fake.getAppIdsMutex.RLock()
	defer fake.getAppIdsMutex.RUnlock()
	return len(fake.getAppIdsArgsForCall)
}

func (fake *FakePolicyDB) GetAppIdsReturns(result1 map[string]bool, result2 error) {
	fake.GetAppIdsStub = nil
	fake.getAppIdsReturns = struct {
		result1 map[string]bool
		result2 error
	}{result1, result2}
}

func (fake *FakePolicyDB) GetAppPolicy(appId string) (*models.ScalingPolicy, error) {
	fake.getAppPolicyMutex.Lock()
	fake.getAppPolicyArgsForCall = append(fake.getAppPolicyArgsForCall, struct {
		appId string
	}{appId})
	fake.recordInvocation("GetAppPolicy", []interface{}{appId})
	fake.getAppPolicyMutex.Unlock()
	if fake.GetAppPolicyStub != nil {
		return fake.GetAppPolicyStub(appId)
	}
	return fake.getAppPolicyReturns.result1, fake.getAppPolicyReturns.result2
}

func (fake *FakePolicyDB) GetAppPolicyCallCount() int {
	fake.getAppPolicyMutex.RLock()
	defer fake.getAppPolicyMutex.RUnlock()
	return len(fake.getAppPolicyArgsForCall)
}

func (fake *FakePolicyDB) GetAppPolicyArgsForCall(i int) string {
	fake.getAppPolicyMutex.RLock()
	defer fake.getAppPolicyMutex.RUnlock()
	return fake.getAppPolicyArgsForCall[i].appId
}

func (fake *FakePolicyDB) GetAppPolicyReturns(result1 *models.ScalingPolicy, result2 error) {
	fake.GetAppPolicyStub = nil
	fake.getAppPolicyReturns = struct {
		result1 *models.ScalingPolicy
		result2 error
	}{result1, result2}
}

func (fake *FakePolicyDB) SaveAppPolicy(appId string, policy string, policyGuid string) error {
	fake.saveAppPolicyMutex.Lock()
	fake.saveAppPolicyArgsForCall = append(fake.saveAppPolicyArgsForCall, struct {
		appId      string
		policy     string
		policyGuid string
	}{appId, policy, policyGuid})
	fake.recordInvocation("SaveAppPolicy", []interface{}{appId, policy, policyGuid})
	fake.saveAppPolicyMutex.Unlock()
	if fake.SaveAppPolicyStub != nil {
		return fake.SaveAppPolicyStub(appId, policy, policyGuid)
	}
	return fake.saveAppPolicyReturns.result1
}

func (fake *FakePolicyDB) SaveAppPolicyCallCount() int {
	fake.saveAppPolicyMutex.RLock()
	defer fake.saveAppPolicyMutex.RUnlock()
	return len(fake.saveAppPolicyArgsForCall)
}

func (fake *FakePolicyDB) SaveAppPolicyArgsForCall(i int) (string, string, string) {
	fake.saveAppPolicyMutex.RLock()
	defer fake.saveAppPolicyMutex.RUnlock()
	return fake.saveAppPolicyArgsForCall[i].appId, fake.saveAppPolicyArgsForCall[i].policy, fake.saveAppPolicyArgsForCall[i].policyGuid
}

func (fake *FakePolicyDB) SaveAppPolicyReturns(result1 error) {
	fake.SaveAppPolicyStub = nil
	fake.saveAppPolicyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePolicyDB) RetrievePolicies() ([]*models.PolicyJson, error) {
	fake.retrievePoliciesMutex.Lock()
	fake.retrievePoliciesArgsForCall = append(fake.retrievePoliciesArgsForCall, struct{}{})
	fake.recordInvocation("RetrievePolicies", []interface{}{})
	fake.retrievePoliciesMutex.Unlock()
	if fake.RetrievePoliciesStub != nil {
		return fake.RetrievePoliciesStub()
	}
	return fake.retrievePoliciesReturns.result1, fake.retrievePoliciesReturns.result2
}

func (fake *FakePolicyDB) RetrievePoliciesCallCount() int {
	fake.retrievePoliciesMutex.RLock()
	defer fake.retrievePoliciesMutex.RUnlock()
	return len(fake.retrievePoliciesArgsForCall)
}

func (fake *FakePolicyDB) RetrievePoliciesReturns(result1 []*models.PolicyJson, result2 error) {
	fake.RetrievePoliciesStub = nil
	fake.retrievePoliciesReturns = struct {
		result1 []*models.PolicyJson
		result2 error
	}{result1, result2}
}

func (fake *FakePolicyDB) Close() error {
	fake.closeMutex.Lock()
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct{}{})
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	}
	return fake.closeReturns.result1
}

func (fake *FakePolicyDB) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakePolicyDB) CloseReturns(result1 error) {
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePolicyDB) DeletePolicy(appId string) error {
	fake.deletePolicyMutex.Lock()
	fake.deletePolicyArgsForCall = append(fake.deletePolicyArgsForCall, struct {
		appId string
	}{appId})
	fake.recordInvocation("DeletePolicy", []interface{}{appId})
	fake.deletePolicyMutex.Unlock()
	if fake.DeletePolicyStub != nil {
		return fake.DeletePolicyStub(appId)
	}
	return fake.deletePolicyReturns.result1
}

func (fake *FakePolicyDB) DeletePolicyCallCount() int {
	fake.deletePolicyMutex.RLock()
	defer fake.deletePolicyMutex.RUnlock()
	return len(fake.deletePolicyArgsForCall)
}

func (fake *FakePolicyDB) DeletePolicyArgsForCall(i int) string {
	fake.deletePolicyMutex.RLock()
	defer fake.deletePolicyMutex.RUnlock()
	return fake.deletePolicyArgsForCall[i].appId
}

func (fake *FakePolicyDB) DeletePolicyReturns(result1 error) {
	fake.DeletePolicyStub = nil
	fake.deletePolicyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePolicyDB) SaveCredential(appId string, cred models.Credential) error {
	fake.saveCredentialMutex.Lock()
	fake.saveCredentialArgsForCall = append(fake.saveCredentialArgsForCall, struct {
		appId string
		cred  models.Credential
	}{appId, cred})
	fake.recordInvocation("SaveCredential", []interface{}{appId, cred})
	fake.saveCredentialMutex.Unlock()
	if fake.SaveCredentialStub != nil {
		return fake.SaveCredentialStub(appId, cred)
	}
	return fake.saveCredentialReturns.result1
}

func (fake *FakePolicyDB) SaveCredentialCallCount() int {
	fake.saveCredentialMutex.RLock()
	defer fake.saveCredentialMutex.RUnlock()
	return len(fake.saveCredentialArgsForCall)
}

func (fake *FakePolicyDB) SaveCredentialArgsForCall(i int) (string, models.Credential) {
	fake.saveCredentialMutex.RLock()
	defer fake.saveCredentialMutex.RUnlock()
	return fake.saveCredentialArgsForCall[i].appId, fake.saveCredentialArgsForCall[i].cred
}

func (fake *FakePolicyDB) SaveCredentialReturns(result1 error) {
	fake.SaveCredentialStub = nil
	fake.saveCredentialReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePolicyDB) DeleteCredential(appId string) error {
	fake.deleteCredentialMutex.Lock()
	fake.deleteCredentialArgsForCall = append(fake.deleteCredentialArgsForCall, struct {
		appId string
	}{appId})
	fake.recordInvocation("DeleteCredential", []interface{}{appId})
	fake.deleteCredentialMutex.Unlock()
	if fake.DeleteCredentialStub != nil {
		return fake.DeleteCredentialStub(appId)
	}
	return fake.deleteCredentialReturns.result1
}

func (fake *FakePolicyDB) DeleteCredentialCallCount() int {
	fake.deleteCredentialMutex.RLock()
	defer fake.deleteCredentialMutex.RUnlock()
	return len(fake.deleteCredentialArgsForCall)
}

func (fake *FakePolicyDB) DeleteCredentialArgsForCall(i int) string {
	fake.deleteCredentialMutex.RLock()
	defer fake.deleteCredentialMutex.RUnlock()
	return fake.deleteCredentialArgsForCall[i].appId
}

func (fake *FakePolicyDB) DeleteCredentialReturns(result1 error) {
	fake.DeleteCredentialStub = nil
	fake.deleteCredentialReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePolicyDB) GetCredential(appId string) (*models.Credential, error) {
	fake.getCredentialMutex.Lock()
	fake.getCredentialArgsForCall = append(fake.getCredentialArgsForCall, struct {
		appId string
	}{appId})
	fake.recordInvocation("GetCredential", []interface{}{appId})
	fake.getCredentialMutex.Unlock()
	if fake.GetCredentialStub != nil {
		return fake.GetCredentialStub(appId)
	}
	return fake.getCredentialReturns.result1, fake.getCredentialReturns.result2
}

func (fake *FakePolicyDB) GetCredentialCallCount() int {
	fake.getCredentialMutex.RLock()
	defer fake.getCredentialMutex.RUnlock()
	return len(fake.getCredentialArgsForCall)
}

func (fake *FakePolicyDB) GetCredentialArgsForCall(i int) string {
	fake.getCredentialMutex.RLock()
	defer fake.getCredentialMutex.RUnlock()
	return fake.getCredentialArgsForCall[i].appId
}

func (fake *FakePolicyDB) GetCredentialReturns(result1 *models.Credential, result2 error) {
	fake.GetCredentialStub = nil
	fake.getCredentialReturns = struct {
		result1 *models.Credential
		result2 error
	}{result1, result2}
}

func (fake *FakePolicyDB) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getDBStatusMutex.RLock()
	defer fake.getDBStatusMutex.RUnlock()
	fake.getAppIdsMutex.RLock()
	defer fake.getAppIdsMutex.RUnlock()
	fake.getAppPolicyMutex.RLock()
	defer fake.getAppPolicyMutex.RUnlock()
	fake.saveAppPolicyMutex.RLock()
	defer fake.saveAppPolicyMutex.RUnlock()
	fake.retrievePoliciesMutex.RLock()
	defer fake.retrievePoliciesMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.deletePolicyMutex.RLock()
	defer fake.deletePolicyMutex.RUnlock()
	fake.saveCredentialMutex.RLock()
	defer fake.saveCredentialMutex.RUnlock()
	fake.deleteCredentialMutex.RLock()
	defer fake.deleteCredentialMutex.RUnlock()
	fake.getCredentialMutex.RLock()
	defer fake.getCredentialMutex.RUnlock()
	return fake.invocations
}

func (fake *FakePolicyDB) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.PolicyDB = new(FakePolicyDB)
