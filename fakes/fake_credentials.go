// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"code.cloudfoundry.org/app-autoscaler/src/autoscaler/cred_helper"
	"code.cloudfoundry.org/app-autoscaler/src/autoscaler/db"
	"code.cloudfoundry.org/app-autoscaler/src/autoscaler/helpers"
	"code.cloudfoundry.org/app-autoscaler/src/autoscaler/models"
	"sync"
)

type FakeCredentials struct {
	CreateStub        func(string, *models.Credential) (*models.Credential, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 string
		arg2 *models.Credential
	}
	createReturns struct {
		result1 *models.Credential
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 *models.Credential
		result2 error
	}
	DeleteStub        func(string) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 string
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	GetStub        func(string) (*models.Credential, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 string
	}
	getReturns struct {
		result1 *models.Credential
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 *models.Credential
		result2 error
	}
	InitializeConfigStub        func(map[string]db.DatabaseConfig, helpers.LoggingConfig) error
	initializeConfigMutex       sync.RWMutex
	initializeConfigArgsForCall []struct {
		arg1 map[string]db.DatabaseConfig
		arg2 helpers.LoggingConfig
	}
	initializeConfigReturns struct {
		result1 error
	}
	initializeConfigReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCredentials) Create(arg1 string, arg2 *models.Credential) (*models.Credential, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 string
		arg2 *models.Credential
	}{arg1, arg2})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1, arg2})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCredentials) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeCredentials) CreateCalls(stub func(string, *models.Credential) (*models.Credential, error)) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *FakeCredentials) CreateArgsForCall(i int) (string, *models.Credential) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCredentials) CreateReturns(result1 *models.Credential, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 *models.Credential
		result2 error
	}{result1, result2}
}

func (fake *FakeCredentials) CreateReturnsOnCall(i int, result1 *models.Credential, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 *models.Credential
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 *models.Credential
		result2 error
	}{result1, result2}
}

func (fake *FakeCredentials) Delete(arg1 string) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.DeleteStub
	fakeReturns := fake.deleteReturns
	fake.recordInvocation("Delete", []interface{}{arg1})
	fake.deleteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCredentials) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeCredentials) DeleteCalls(stub func(string) error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeCredentials) DeleteArgsForCall(i int) string {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCredentials) DeleteReturns(result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCredentials) DeleteReturnsOnCall(i int, result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCredentials) Get(arg1 string) (*models.Credential, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCredentials) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeCredentials) GetCalls(stub func(string) (*models.Credential, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeCredentials) GetArgsForCall(i int) string {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCredentials) GetReturns(result1 *models.Credential, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *models.Credential
		result2 error
	}{result1, result2}
}

func (fake *FakeCredentials) GetReturnsOnCall(i int, result1 *models.Credential, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *models.Credential
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *models.Credential
		result2 error
	}{result1, result2}
}

func (fake *FakeCredentials) InitializeConfig(arg1 map[string]db.DatabaseConfig, arg2 helpers.LoggingConfig) error {
	fake.initializeConfigMutex.Lock()
	ret, specificReturn := fake.initializeConfigReturnsOnCall[len(fake.initializeConfigArgsForCall)]
	fake.initializeConfigArgsForCall = append(fake.initializeConfigArgsForCall, struct {
		arg1 map[string]db.DatabaseConfig
		arg2 helpers.LoggingConfig
	}{arg1, arg2})
	stub := fake.InitializeConfigStub
	fakeReturns := fake.initializeConfigReturns
	fake.recordInvocation("InitializeConfig", []interface{}{arg1, arg2})
	fake.initializeConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCredentials) InitializeConfigCallCount() int {
	fake.initializeConfigMutex.RLock()
	defer fake.initializeConfigMutex.RUnlock()
	return len(fake.initializeConfigArgsForCall)
}

func (fake *FakeCredentials) InitializeConfigCalls(stub func(map[string]db.DatabaseConfig, helpers.LoggingConfig) error) {
	fake.initializeConfigMutex.Lock()
	defer fake.initializeConfigMutex.Unlock()
	fake.InitializeConfigStub = stub
}

func (fake *FakeCredentials) InitializeConfigArgsForCall(i int) (map[string]db.DatabaseConfig, helpers.LoggingConfig) {
	fake.initializeConfigMutex.RLock()
	defer fake.initializeConfigMutex.RUnlock()
	argsForCall := fake.initializeConfigArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCredentials) InitializeConfigReturns(result1 error) {
	fake.initializeConfigMutex.Lock()
	defer fake.initializeConfigMutex.Unlock()
	fake.InitializeConfigStub = nil
	fake.initializeConfigReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCredentials) InitializeConfigReturnsOnCall(i int, result1 error) {
	fake.initializeConfigMutex.Lock()
	defer fake.initializeConfigMutex.Unlock()
	fake.InitializeConfigStub = nil
	if fake.initializeConfigReturnsOnCall == nil {
		fake.initializeConfigReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.initializeConfigReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCredentials) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.initializeConfigMutex.RLock()
	defer fake.initializeConfigMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCredentials) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cred_helper.Credentials = new(FakeCredentials)
