// This file was generated by counterfeiter
package fakes

import (
	"autoscaler/metricsgateway"
	"sync"

	"code.cloudfoundry.org/go-loggregator/rpc/loggregator_v2"
)

type FakeEmitter struct {
	AcceptStub        func(envelope *loggregator_v2.Envelope)
	acceptMutex       sync.RWMutex
	acceptArgsForCall []struct {
		envelope *loggregator_v2.Envelope
	}
	EmitStub        func(*loggregator_v2.Envelope) error
	emitMutex       sync.RWMutex
	emitArgsForCall []struct {
		arg1 *loggregator_v2.Envelope
	}
	emitReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEmitter) Accept(envelope *loggregator_v2.Envelope) {
	fake.acceptMutex.Lock()
	fake.acceptArgsForCall = append(fake.acceptArgsForCall, struct {
		envelope *loggregator_v2.Envelope
	}{envelope})
	fake.recordInvocation("Accept", []interface{}{envelope})
	fake.acceptMutex.Unlock()
	if fake.AcceptStub != nil {
		fake.AcceptStub(envelope)
	}
}

func (fake *FakeEmitter) AcceptCallCount() int {
	fake.acceptMutex.RLock()
	defer fake.acceptMutex.RUnlock()
	return len(fake.acceptArgsForCall)
}

func (fake *FakeEmitter) AcceptArgsForCall(i int) *loggregator_v2.Envelope {
	fake.acceptMutex.RLock()
	defer fake.acceptMutex.RUnlock()
	return fake.acceptArgsForCall[i].envelope
}

func (fake *FakeEmitter) Emit(arg1 *loggregator_v2.Envelope) error {
	fake.emitMutex.Lock()
	fake.emitArgsForCall = append(fake.emitArgsForCall, struct {
		arg1 *loggregator_v2.Envelope
	}{arg1})
	fake.recordInvocation("Emit", []interface{}{arg1})
	fake.emitMutex.Unlock()
	if fake.EmitStub != nil {
		return fake.EmitStub(arg1)
	}
	return fake.emitReturns.result1
}

func (fake *FakeEmitter) EmitCallCount() int {
	fake.emitMutex.RLock()
	defer fake.emitMutex.RUnlock()
	return len(fake.emitArgsForCall)
}

func (fake *FakeEmitter) EmitArgsForCall(i int) *loggregator_v2.Envelope {
	fake.emitMutex.RLock()
	defer fake.emitMutex.RUnlock()
	return fake.emitArgsForCall[i].arg1
}

func (fake *FakeEmitter) EmitReturns(result1 error) {
	fake.EmitStub = nil
	fake.emitReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEmitter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.acceptMutex.RLock()
	defer fake.acceptMutex.RUnlock()
	fake.emitMutex.RLock()
	defer fake.emitMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeEmitter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ metricsgateway.Emitter = new(FakeEmitter)
