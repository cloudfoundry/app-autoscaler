// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
	"time"

	"code.cloudfoundry.org/app-autoscaler/src/autoscaler/envelopeprocessor"
	"code.cloudfoundry.org/app-autoscaler/src/autoscaler/models"
	"code.cloudfoundry.org/go-loggregator/v8/rpc/loggregator_v2"
)

type FakeEnvelopeProcessor struct {
	GetGaugeInstanceMetricsStub        func([]*loggregator_v2.Envelope, int64) ([]models.AppInstanceMetric, error)
	getGaugeInstanceMetricsMutex       sync.RWMutex
	getGaugeInstanceMetricsArgsForCall []struct {
		arg1 []*loggregator_v2.Envelope
		arg2 int64
	}
	getGaugeInstanceMetricsReturns struct {
		result1 []models.AppInstanceMetric
		result2 error
	}
	getGaugeInstanceMetricsReturnsOnCall map[int]struct {
		result1 []models.AppInstanceMetric
		result2 error
	}
	GetHttpStartStopInstanceMetricsStub        func([]*loggregator_v2.Envelope, string, int64, time.Duration) []models.AppInstanceMetric
	getHttpStartStopInstanceMetricsMutex       sync.RWMutex
	getHttpStartStopInstanceMetricsArgsForCall []struct {
		arg1 []*loggregator_v2.Envelope
		arg2 string
		arg3 int64
		arg4 time.Duration
	}
	getHttpStartStopInstanceMetricsReturns struct {
		result1 []models.AppInstanceMetric
	}
	getHttpStartStopInstanceMetricsReturnsOnCall map[int]struct {
		result1 []models.AppInstanceMetric
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEnvelopeProcessor) GetGaugeMetrics(arg1 []*loggregator_v2.Envelope, arg2 int64) ([]models.AppInstanceMetric, error) {
	var arg1Copy []*loggregator_v2.Envelope
	if arg1 != nil {
		arg1Copy = make([]*loggregator_v2.Envelope, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.getGaugeInstanceMetricsMutex.Lock()
	ret, specificReturn := fake.getGaugeInstanceMetricsReturnsOnCall[len(fake.getGaugeInstanceMetricsArgsForCall)]
	fake.getGaugeInstanceMetricsArgsForCall = append(fake.getGaugeInstanceMetricsArgsForCall, struct {
		arg1 []*loggregator_v2.Envelope
		arg2 int64
	}{arg1Copy, arg2})
	stub := fake.GetGaugeInstanceMetricsStub
	fakeReturns := fake.getGaugeInstanceMetricsReturns
	fake.recordInvocation("GetGaugeMetrics", []interface{}{arg1Copy, arg2})
	fake.getGaugeInstanceMetricsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEnvelopeProcessor) GetGaugeInstanceMetricsCallCount() int {
	fake.getGaugeInstanceMetricsMutex.RLock()
	defer fake.getGaugeInstanceMetricsMutex.RUnlock()
	return len(fake.getGaugeInstanceMetricsArgsForCall)
}

func (fake *FakeEnvelopeProcessor) GetGaugeInstanceMetricsCalls(stub func([]*loggregator_v2.Envelope, int64) ([]models.AppInstanceMetric, error)) {
	fake.getGaugeInstanceMetricsMutex.Lock()
	defer fake.getGaugeInstanceMetricsMutex.Unlock()
	fake.GetGaugeInstanceMetricsStub = stub
}

func (fake *FakeEnvelopeProcessor) GetGaugeInstanceMetricsArgsForCall(i int) ([]*loggregator_v2.Envelope, int64) {
	fake.getGaugeInstanceMetricsMutex.RLock()
	defer fake.getGaugeInstanceMetricsMutex.RUnlock()
	argsForCall := fake.getGaugeInstanceMetricsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEnvelopeProcessor) GetGaugeInstanceMetricsReturns(result1 []models.AppInstanceMetric, result2 error) {
	fake.getGaugeInstanceMetricsMutex.Lock()
	defer fake.getGaugeInstanceMetricsMutex.Unlock()
	fake.GetGaugeInstanceMetricsStub = nil
	fake.getGaugeInstanceMetricsReturns = struct {
		result1 []models.AppInstanceMetric
		result2 error
	}{result1, result2}
}

func (fake *FakeEnvelopeProcessor) GetGaugeInstanceMetricsReturnsOnCall(i int, result1 []models.AppInstanceMetric, result2 error) {
	fake.getGaugeInstanceMetricsMutex.Lock()
	defer fake.getGaugeInstanceMetricsMutex.Unlock()
	fake.GetGaugeInstanceMetricsStub = nil
	if fake.getGaugeInstanceMetricsReturnsOnCall == nil {
		fake.getGaugeInstanceMetricsReturnsOnCall = make(map[int]struct {
			result1 []models.AppInstanceMetric
			result2 error
		})
	}
	fake.getGaugeInstanceMetricsReturnsOnCall[i] = struct {
		result1 []models.AppInstanceMetric
		result2 error
	}{result1, result2}
}

func (fake *FakeEnvelopeProcessor) GetTimerMetrics(arg1 []*loggregator_v2.Envelope, arg2 string, arg3 int64, arg4 time.Duration) []models.AppInstanceMetric {
	var arg1Copy []*loggregator_v2.Envelope
	if arg1 != nil {
		arg1Copy = make([]*loggregator_v2.Envelope, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.getHttpStartStopInstanceMetricsMutex.Lock()
	ret, specificReturn := fake.getHttpStartStopInstanceMetricsReturnsOnCall[len(fake.getHttpStartStopInstanceMetricsArgsForCall)]
	fake.getHttpStartStopInstanceMetricsArgsForCall = append(fake.getHttpStartStopInstanceMetricsArgsForCall, struct {
		arg1 []*loggregator_v2.Envelope
		arg2 string
		arg3 int64
		arg4 time.Duration
	}{arg1Copy, arg2, arg3, arg4})
	stub := fake.GetHttpStartStopInstanceMetricsStub
	fakeReturns := fake.getHttpStartStopInstanceMetricsReturns
	fake.recordInvocation("GetTimerMetrics", []interface{}{arg1Copy, arg2, arg3, arg4})
	fake.getHttpStartStopInstanceMetricsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeEnvelopeProcessor) GetHttpStartStopInstanceMetricsCallCount() int {
	fake.getHttpStartStopInstanceMetricsMutex.RLock()
	defer fake.getHttpStartStopInstanceMetricsMutex.RUnlock()
	return len(fake.getHttpStartStopInstanceMetricsArgsForCall)
}

func (fake *FakeEnvelopeProcessor) GetHttpStartStopInstanceMetricsCalls(stub func([]*loggregator_v2.Envelope, string, int64, time.Duration) []models.AppInstanceMetric) {
	fake.getHttpStartStopInstanceMetricsMutex.Lock()
	defer fake.getHttpStartStopInstanceMetricsMutex.Unlock()
	fake.GetHttpStartStopInstanceMetricsStub = stub
}

func (fake *FakeEnvelopeProcessor) GetHttpStartStopInstanceMetricsArgsForCall(i int) ([]*loggregator_v2.Envelope, string, int64, time.Duration) {
	fake.getHttpStartStopInstanceMetricsMutex.RLock()
	defer fake.getHttpStartStopInstanceMetricsMutex.RUnlock()
	argsForCall := fake.getHttpStartStopInstanceMetricsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeEnvelopeProcessor) GetHttpStartStopInstanceMetricsReturns(result1 []models.AppInstanceMetric) {
	fake.getHttpStartStopInstanceMetricsMutex.Lock()
	defer fake.getHttpStartStopInstanceMetricsMutex.Unlock()
	fake.GetHttpStartStopInstanceMetricsStub = nil
	fake.getHttpStartStopInstanceMetricsReturns = struct {
		result1 []models.AppInstanceMetric
	}{result1}
}

func (fake *FakeEnvelopeProcessor) GetHttpStartStopInstanceMetricsReturnsOnCall(i int, result1 []models.AppInstanceMetric) {
	fake.getHttpStartStopInstanceMetricsMutex.Lock()
	defer fake.getHttpStartStopInstanceMetricsMutex.Unlock()
	fake.GetHttpStartStopInstanceMetricsStub = nil
	if fake.getHttpStartStopInstanceMetricsReturnsOnCall == nil {
		fake.getHttpStartStopInstanceMetricsReturnsOnCall = make(map[int]struct {
			result1 []models.AppInstanceMetric
		})
	}
	fake.getHttpStartStopInstanceMetricsReturnsOnCall[i] = struct {
		result1 []models.AppInstanceMetric
	}{result1}
}

func (fake *FakeEnvelopeProcessor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getGaugeInstanceMetricsMutex.RLock()
	defer fake.getGaugeInstanceMetricsMutex.RUnlock()
	fake.getHttpStartStopInstanceMetricsMutex.RLock()
	defer fake.getHttpStartStopInstanceMetricsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEnvelopeProcessor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ envelopeprocessor.EnvelopeProcessor = new(FakeEnvelopeProcessor)
