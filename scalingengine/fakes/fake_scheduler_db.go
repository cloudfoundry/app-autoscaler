// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"autoscaler/db"
	"autoscaler/healthendpoint"
	"autoscaler/models"
	"sync"
	"time"

	"code.cloudfoundry.org/clock"
)

type FakeSchedulerDB struct {
	GetActiveSchedulesStub        func() (map[string]*models.ActiveSchedule, error)
	getActiveSchedulesMutex       sync.RWMutex
	getActiveSchedulesArgsForCall []struct{}
	getActiveSchedulesReturns     struct {
		result1 map[string]*models.ActiveSchedule
		result2 error
	}
	getActiveSchedulesReturnsOnCall map[int]struct {
		result1 map[string]*models.ActiveSchedule
		result2 error
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct{}
	closeReturns     struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	EmitHealthMetricsStub        func(h healthendpoint.Health, cclock clock.Clock, interval time.Duration)
	emitHealthMetricsMutex       sync.RWMutex
	emitHealthMetricsArgsForCall []struct {
		h        healthendpoint.Health
		cclock   clock.Clock
		interval time.Duration
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSchedulerDB) GetActiveSchedules() (map[string]*models.ActiveSchedule, error) {
	fake.getActiveSchedulesMutex.Lock()
	ret, specificReturn := fake.getActiveSchedulesReturnsOnCall[len(fake.getActiveSchedulesArgsForCall)]
	fake.getActiveSchedulesArgsForCall = append(fake.getActiveSchedulesArgsForCall, struct{}{})
	fake.recordInvocation("GetActiveSchedules", []interface{}{})
	fake.getActiveSchedulesMutex.Unlock()
	if fake.GetActiveSchedulesStub != nil {
		return fake.GetActiveSchedulesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getActiveSchedulesReturns.result1, fake.getActiveSchedulesReturns.result2
}

func (fake *FakeSchedulerDB) GetActiveSchedulesCallCount() int {
	fake.getActiveSchedulesMutex.RLock()
	defer fake.getActiveSchedulesMutex.RUnlock()
	return len(fake.getActiveSchedulesArgsForCall)
}

func (fake *FakeSchedulerDB) GetActiveSchedulesReturns(result1 map[string]*models.ActiveSchedule, result2 error) {
	fake.GetActiveSchedulesStub = nil
	fake.getActiveSchedulesReturns = struct {
		result1 map[string]*models.ActiveSchedule
		result2 error
	}{result1, result2}
}

func (fake *FakeSchedulerDB) GetActiveSchedulesReturnsOnCall(i int, result1 map[string]*models.ActiveSchedule, result2 error) {
	fake.GetActiveSchedulesStub = nil
	if fake.getActiveSchedulesReturnsOnCall == nil {
		fake.getActiveSchedulesReturnsOnCall = make(map[int]struct {
			result1 map[string]*models.ActiveSchedule
			result2 error
		})
	}
	fake.getActiveSchedulesReturnsOnCall[i] = struct {
		result1 map[string]*models.ActiveSchedule
		result2 error
	}{result1, result2}
}

func (fake *FakeSchedulerDB) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct{}{})
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.closeReturns.result1
}

func (fake *FakeSchedulerDB) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeSchedulerDB) CloseReturns(result1 error) {
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSchedulerDB) CloseReturnsOnCall(i int, result1 error) {
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSchedulerDB) EmitHealthMetrics(h healthendpoint.Health, cclock clock.Clock, interval time.Duration) {
	fake.emitHealthMetricsMutex.Lock()
	fake.emitHealthMetricsArgsForCall = append(fake.emitHealthMetricsArgsForCall, struct {
		h        healthendpoint.Health
		cclock   clock.Clock
		interval time.Duration
	}{h, cclock, interval})
	fake.recordInvocation("EmitHealthMetrics", []interface{}{h, cclock, interval})
	fake.emitHealthMetricsMutex.Unlock()
	if fake.EmitHealthMetricsStub != nil {
		fake.EmitHealthMetricsStub(h, cclock, interval)
	}
}

func (fake *FakeSchedulerDB) EmitHealthMetricsCallCount() int {
	fake.emitHealthMetricsMutex.RLock()
	defer fake.emitHealthMetricsMutex.RUnlock()
	return len(fake.emitHealthMetricsArgsForCall)
}

func (fake *FakeSchedulerDB) EmitHealthMetricsArgsForCall(i int) (healthendpoint.Health, clock.Clock, time.Duration) {
	fake.emitHealthMetricsMutex.RLock()
	defer fake.emitHealthMetricsMutex.RUnlock()
	return fake.emitHealthMetricsArgsForCall[i].h, fake.emitHealthMetricsArgsForCall[i].cclock, fake.emitHealthMetricsArgsForCall[i].interval
}

func (fake *FakeSchedulerDB) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getActiveSchedulesMutex.RLock()
	defer fake.getActiveSchedulesMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.emitHealthMetricsMutex.RLock()
	defer fake.emitHealthMetricsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSchedulerDB) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.SchedulerDB = new(FakeSchedulerDB)
