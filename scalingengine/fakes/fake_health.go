// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"autoscaler/healthendpoint"
	"sync"
)

type FakeHealth struct {
	SetStub        func(name string, value float64)
	setMutex       sync.RWMutex
	setArgsForCall []struct {
		name  string
		value float64
	}
	IncStub        func(name string)
	incMutex       sync.RWMutex
	incArgsForCall []struct {
		name string
	}
	DecStub        func(name string)
	decMutex       sync.RWMutex
	decArgsForCall []struct {
		name string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHealth) Set(name string, value float64) {
	fake.setMutex.Lock()
	fake.setArgsForCall = append(fake.setArgsForCall, struct {
		name  string
		value float64
	}{name, value})
	fake.recordInvocation("Set", []interface{}{name, value})
	fake.setMutex.Unlock()
	if fake.SetStub != nil {
		fake.SetStub(name, value)
	}
}

func (fake *FakeHealth) SetCallCount() int {
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	return len(fake.setArgsForCall)
}

func (fake *FakeHealth) SetArgsForCall(i int) (string, float64) {
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	return fake.setArgsForCall[i].name, fake.setArgsForCall[i].value
}

func (fake *FakeHealth) Inc(name string) {
	fake.incMutex.Lock()
	fake.incArgsForCall = append(fake.incArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("Inc", []interface{}{name})
	fake.incMutex.Unlock()
	if fake.IncStub != nil {
		fake.IncStub(name)
	}
}

func (fake *FakeHealth) IncCallCount() int {
	fake.incMutex.RLock()
	defer fake.incMutex.RUnlock()
	return len(fake.incArgsForCall)
}

func (fake *FakeHealth) IncArgsForCall(i int) string {
	fake.incMutex.RLock()
	defer fake.incMutex.RUnlock()
	return fake.incArgsForCall[i].name
}

func (fake *FakeHealth) Dec(name string) {
	fake.decMutex.Lock()
	fake.decArgsForCall = append(fake.decArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("Dec", []interface{}{name})
	fake.decMutex.Unlock()
	if fake.DecStub != nil {
		fake.DecStub(name)
	}
}

func (fake *FakeHealth) DecCallCount() int {
	fake.decMutex.RLock()
	defer fake.decMutex.RUnlock()
	return len(fake.decArgsForCall)
}

func (fake *FakeHealth) DecArgsForCall(i int) string {
	fake.decMutex.RLock()
	defer fake.decMutex.RUnlock()
	return fake.decArgsForCall[i].name
}

func (fake *FakeHealth) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	fake.incMutex.RLock()
	defer fake.incMutex.RUnlock()
	fake.decMutex.RLock()
	defer fake.decMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHealth) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ healthendpoint.Health = new(FakeHealth)
