// This file was generated by counterfeiter
package fakes

import (
	"autoscaler/db"
	"autoscaler/models"
	"sync"
)

type FakeHistoryDB struct {
	SaveScalingHistoryStub        func(history *models.AppScalingHistory) error
	saveScalingHistoryMutex       sync.RWMutex
	saveScalingHistoryArgsForCall []struct {
		history *models.AppScalingHistory
	}
	saveScalingHistoryReturns struct {
		result1 error
	}
	RetrieveScalingHistoriesStub        func(appId string, start int64, end int64) ([]*models.AppScalingHistory, error)
	retrieveScalingHistoriesMutex       sync.RWMutex
	retrieveScalingHistoriesArgsForCall []struct {
		appId string
		start int64
		end   int64
	}
	retrieveScalingHistoriesReturns struct {
		result1 []*models.AppScalingHistory
		result2 error
	}
	UpdateScalingCooldownExpireTimeStub        func(appId string, expireAt int64) error
	updateScalingCooldownExpireTimeMutex       sync.RWMutex
	updateScalingCooldownExpireTimeArgsForCall []struct {
		appId    string
		expireAt int64
	}
	updateScalingCooldownExpireTimeReturns struct {
		result1 error
	}
	CanScaleAppStub        func(appId string) (bool, error)
	canScaleAppMutex       sync.RWMutex
	canScaleAppArgsForCall []struct {
		appId string
	}
	canScaleAppReturns struct {
		result1 bool
		result2 error
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct{}
	closeReturns     struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHistoryDB) SaveScalingHistory(history *models.AppScalingHistory) error {
	fake.saveScalingHistoryMutex.Lock()
	fake.saveScalingHistoryArgsForCall = append(fake.saveScalingHistoryArgsForCall, struct {
		history *models.AppScalingHistory
	}{history})
	fake.recordInvocation("SaveScalingHistory", []interface{}{history})
	fake.saveScalingHistoryMutex.Unlock()
	if fake.SaveScalingHistoryStub != nil {
		return fake.SaveScalingHistoryStub(history)
	} else {
		return fake.saveScalingHistoryReturns.result1
	}
}

func (fake *FakeHistoryDB) SaveScalingHistoryCallCount() int {
	fake.saveScalingHistoryMutex.RLock()
	defer fake.saveScalingHistoryMutex.RUnlock()
	return len(fake.saveScalingHistoryArgsForCall)
}

func (fake *FakeHistoryDB) SaveScalingHistoryArgsForCall(i int) *models.AppScalingHistory {
	fake.saveScalingHistoryMutex.RLock()
	defer fake.saveScalingHistoryMutex.RUnlock()
	return fake.saveScalingHistoryArgsForCall[i].history
}

func (fake *FakeHistoryDB) SaveScalingHistoryReturns(result1 error) {
	fake.SaveScalingHistoryStub = nil
	fake.saveScalingHistoryReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHistoryDB) RetrieveScalingHistories(appId string, start int64, end int64) ([]*models.AppScalingHistory, error) {
	fake.retrieveScalingHistoriesMutex.Lock()
	fake.retrieveScalingHistoriesArgsForCall = append(fake.retrieveScalingHistoriesArgsForCall, struct {
		appId string
		start int64
		end   int64
	}{appId, start, end})
	fake.recordInvocation("RetrieveScalingHistories", []interface{}{appId, start, end})
	fake.retrieveScalingHistoriesMutex.Unlock()
	if fake.RetrieveScalingHistoriesStub != nil {
		return fake.RetrieveScalingHistoriesStub(appId, start, end)
	} else {
		return fake.retrieveScalingHistoriesReturns.result1, fake.retrieveScalingHistoriesReturns.result2
	}
}

func (fake *FakeHistoryDB) RetrieveScalingHistoriesCallCount() int {
	fake.retrieveScalingHistoriesMutex.RLock()
	defer fake.retrieveScalingHistoriesMutex.RUnlock()
	return len(fake.retrieveScalingHistoriesArgsForCall)
}

func (fake *FakeHistoryDB) RetrieveScalingHistoriesArgsForCall(i int) (string, int64, int64) {
	fake.retrieveScalingHistoriesMutex.RLock()
	defer fake.retrieveScalingHistoriesMutex.RUnlock()
	return fake.retrieveScalingHistoriesArgsForCall[i].appId, fake.retrieveScalingHistoriesArgsForCall[i].start, fake.retrieveScalingHistoriesArgsForCall[i].end
}

func (fake *FakeHistoryDB) RetrieveScalingHistoriesReturns(result1 []*models.AppScalingHistory, result2 error) {
	fake.RetrieveScalingHistoriesStub = nil
	fake.retrieveScalingHistoriesReturns = struct {
		result1 []*models.AppScalingHistory
		result2 error
	}{result1, result2}
}

func (fake *FakeHistoryDB) UpdateScalingCooldownExpireTime(appId string, expireAt int64) error {
	fake.updateScalingCooldownExpireTimeMutex.Lock()
	fake.updateScalingCooldownExpireTimeArgsForCall = append(fake.updateScalingCooldownExpireTimeArgsForCall, struct {
		appId    string
		expireAt int64
	}{appId, expireAt})
	fake.recordInvocation("UpdateScalingCooldownExpireTime", []interface{}{appId, expireAt})
	fake.updateScalingCooldownExpireTimeMutex.Unlock()
	if fake.UpdateScalingCooldownExpireTimeStub != nil {
		return fake.UpdateScalingCooldownExpireTimeStub(appId, expireAt)
	} else {
		return fake.updateScalingCooldownExpireTimeReturns.result1
	}
}

func (fake *FakeHistoryDB) UpdateScalingCooldownExpireTimeCallCount() int {
	fake.updateScalingCooldownExpireTimeMutex.RLock()
	defer fake.updateScalingCooldownExpireTimeMutex.RUnlock()
	return len(fake.updateScalingCooldownExpireTimeArgsForCall)
}

func (fake *FakeHistoryDB) UpdateScalingCooldownExpireTimeArgsForCall(i int) (string, int64) {
	fake.updateScalingCooldownExpireTimeMutex.RLock()
	defer fake.updateScalingCooldownExpireTimeMutex.RUnlock()
	return fake.updateScalingCooldownExpireTimeArgsForCall[i].appId, fake.updateScalingCooldownExpireTimeArgsForCall[i].expireAt
}

func (fake *FakeHistoryDB) UpdateScalingCooldownExpireTimeReturns(result1 error) {
	fake.UpdateScalingCooldownExpireTimeStub = nil
	fake.updateScalingCooldownExpireTimeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHistoryDB) CanScaleApp(appId string) (bool, error) {
	fake.canScaleAppMutex.Lock()
	fake.canScaleAppArgsForCall = append(fake.canScaleAppArgsForCall, struct {
		appId string
	}{appId})
	fake.recordInvocation("CanScaleApp", []interface{}{appId})
	fake.canScaleAppMutex.Unlock()
	if fake.CanScaleAppStub != nil {
		return fake.CanScaleAppStub(appId)
	} else {
		return fake.canScaleAppReturns.result1, fake.canScaleAppReturns.result2
	}
}

func (fake *FakeHistoryDB) CanScaleAppCallCount() int {
	fake.canScaleAppMutex.RLock()
	defer fake.canScaleAppMutex.RUnlock()
	return len(fake.canScaleAppArgsForCall)
}

func (fake *FakeHistoryDB) CanScaleAppArgsForCall(i int) string {
	fake.canScaleAppMutex.RLock()
	defer fake.canScaleAppMutex.RUnlock()
	return fake.canScaleAppArgsForCall[i].appId
}

func (fake *FakeHistoryDB) CanScaleAppReturns(result1 bool, result2 error) {
	fake.CanScaleAppStub = nil
	fake.canScaleAppReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeHistoryDB) Close() error {
	fake.closeMutex.Lock()
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct{}{})
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	} else {
		return fake.closeReturns.result1
	}
}

func (fake *FakeHistoryDB) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeHistoryDB) CloseReturns(result1 error) {
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHistoryDB) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.saveScalingHistoryMutex.RLock()
	defer fake.saveScalingHistoryMutex.RUnlock()
	fake.retrieveScalingHistoriesMutex.RLock()
	defer fake.retrieveScalingHistoriesMutex.RUnlock()
	fake.updateScalingCooldownExpireTimeMutex.RLock()
	defer fake.updateScalingCooldownExpireTimeMutex.RUnlock()
	fake.canScaleAppMutex.RLock()
	defer fake.canScaleAppMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeHistoryDB) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.HistoryDB = new(FakeHistoryDB)
