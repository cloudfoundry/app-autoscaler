// This file was generated by counterfeiter
package fakes

import (
	"autoscaler/models"
	"autoscaler/scalingengine"
	"sync"
)

type FakeScalingEngine struct {
	ScaleStub        func(appId string, trigger *models.Trigger) (int, error)
	scaleMutex       sync.RWMutex
	scaleArgsForCall []struct {
		appId   string
		trigger *models.Trigger
	}
	scaleReturns struct {
		result1 int
		result2 error
	}
	ComputeNewInstancesStub        func(currentInstances int, adjustment string) (int, error)
	computeNewInstancesMutex       sync.RWMutex
	computeNewInstancesArgsForCall []struct {
		currentInstances int
		adjustment       string
	}
	computeNewInstancesReturns struct {
		result1 int
		result2 error
	}
	SetActiveScheduleStub        func(appId string, schedule *scalingengine.ActiveSchedule) error
	setActiveScheduleMutex       sync.RWMutex
	setActiveScheduleArgsForCall []struct {
		appId    string
		schedule *scalingengine.ActiveSchedule
	}
	setActiveScheduleReturns struct {
		result1 error
	}
	RemoveActiveScheduleStub        func(appId string, scheduleId string) error
	removeActiveScheduleMutex       sync.RWMutex
	removeActiveScheduleArgsForCall []struct {
		appId      string
		scheduleId string
	}
	removeActiveScheduleReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeScalingEngine) Scale(appId string, trigger *models.Trigger) (int, error) {
	fake.scaleMutex.Lock()
	fake.scaleArgsForCall = append(fake.scaleArgsForCall, struct {
		appId   string
		trigger *models.Trigger
	}{appId, trigger})
	fake.recordInvocation("Scale", []interface{}{appId, trigger})
	fake.scaleMutex.Unlock()
	if fake.ScaleStub != nil {
		return fake.ScaleStub(appId, trigger)
	} else {
		return fake.scaleReturns.result1, fake.scaleReturns.result2
	}
}

func (fake *FakeScalingEngine) ScaleCallCount() int {
	fake.scaleMutex.RLock()
	defer fake.scaleMutex.RUnlock()
	return len(fake.scaleArgsForCall)
}

func (fake *FakeScalingEngine) ScaleArgsForCall(i int) (string, *models.Trigger) {
	fake.scaleMutex.RLock()
	defer fake.scaleMutex.RUnlock()
	return fake.scaleArgsForCall[i].appId, fake.scaleArgsForCall[i].trigger
}

func (fake *FakeScalingEngine) ScaleReturns(result1 int, result2 error) {
	fake.ScaleStub = nil
	fake.scaleReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeScalingEngine) ComputeNewInstances(currentInstances int, adjustment string) (int, error) {
	fake.computeNewInstancesMutex.Lock()
	fake.computeNewInstancesArgsForCall = append(fake.computeNewInstancesArgsForCall, struct {
		currentInstances int
		adjustment       string
	}{currentInstances, adjustment})
	fake.recordInvocation("ComputeNewInstances", []interface{}{currentInstances, adjustment})
	fake.computeNewInstancesMutex.Unlock()
	if fake.ComputeNewInstancesStub != nil {
		return fake.ComputeNewInstancesStub(currentInstances, adjustment)
	} else {
		return fake.computeNewInstancesReturns.result1, fake.computeNewInstancesReturns.result2
	}
}

func (fake *FakeScalingEngine) ComputeNewInstancesCallCount() int {
	fake.computeNewInstancesMutex.RLock()
	defer fake.computeNewInstancesMutex.RUnlock()
	return len(fake.computeNewInstancesArgsForCall)
}

func (fake *FakeScalingEngine) ComputeNewInstancesArgsForCall(i int) (int, string) {
	fake.computeNewInstancesMutex.RLock()
	defer fake.computeNewInstancesMutex.RUnlock()
	return fake.computeNewInstancesArgsForCall[i].currentInstances, fake.computeNewInstancesArgsForCall[i].adjustment
}

func (fake *FakeScalingEngine) ComputeNewInstancesReturns(result1 int, result2 error) {
	fake.ComputeNewInstancesStub = nil
	fake.computeNewInstancesReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeScalingEngine) SetActiveSchedule(appId string, schedule *scalingengine.ActiveSchedule) error {
	fake.setActiveScheduleMutex.Lock()
	fake.setActiveScheduleArgsForCall = append(fake.setActiveScheduleArgsForCall, struct {
		appId    string
		schedule *scalingengine.ActiveSchedule
	}{appId, schedule})
	fake.recordInvocation("SetActiveSchedule", []interface{}{appId, schedule})
	fake.setActiveScheduleMutex.Unlock()
	if fake.SetActiveScheduleStub != nil {
		return fake.SetActiveScheduleStub(appId, schedule)
	} else {
		return fake.setActiveScheduleReturns.result1
	}
}

func (fake *FakeScalingEngine) SetActiveScheduleCallCount() int {
	fake.setActiveScheduleMutex.RLock()
	defer fake.setActiveScheduleMutex.RUnlock()
	return len(fake.setActiveScheduleArgsForCall)
}

func (fake *FakeScalingEngine) SetActiveScheduleArgsForCall(i int) (string, *scalingengine.ActiveSchedule) {
	fake.setActiveScheduleMutex.RLock()
	defer fake.setActiveScheduleMutex.RUnlock()
	return fake.setActiveScheduleArgsForCall[i].appId, fake.setActiveScheduleArgsForCall[i].schedule
}

func (fake *FakeScalingEngine) SetActiveScheduleReturns(result1 error) {
	fake.SetActiveScheduleStub = nil
	fake.setActiveScheduleReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeScalingEngine) RemoveActiveSchedule(appId string, scheduleId string) error {
	fake.removeActiveScheduleMutex.Lock()
	fake.removeActiveScheduleArgsForCall = append(fake.removeActiveScheduleArgsForCall, struct {
		appId      string
		scheduleId string
	}{appId, scheduleId})
	fake.recordInvocation("RemoveActiveSchedule", []interface{}{appId, scheduleId})
	fake.removeActiveScheduleMutex.Unlock()
	if fake.RemoveActiveScheduleStub != nil {
		return fake.RemoveActiveScheduleStub(appId, scheduleId)
	} else {
		return fake.removeActiveScheduleReturns.result1
	}
}

func (fake *FakeScalingEngine) RemoveActiveScheduleCallCount() int {
	fake.removeActiveScheduleMutex.RLock()
	defer fake.removeActiveScheduleMutex.RUnlock()
	return len(fake.removeActiveScheduleArgsForCall)
}

func (fake *FakeScalingEngine) RemoveActiveScheduleArgsForCall(i int) (string, string) {
	fake.removeActiveScheduleMutex.RLock()
	defer fake.removeActiveScheduleMutex.RUnlock()
	return fake.removeActiveScheduleArgsForCall[i].appId, fake.removeActiveScheduleArgsForCall[i].scheduleId
}

func (fake *FakeScalingEngine) RemoveActiveScheduleReturns(result1 error) {
	fake.RemoveActiveScheduleStub = nil
	fake.removeActiveScheduleReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeScalingEngine) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.scaleMutex.RLock()
	defer fake.scaleMutex.RUnlock()
	fake.computeNewInstancesMutex.RLock()
	defer fake.computeNewInstancesMutex.RUnlock()
	fake.setActiveScheduleMutex.RLock()
	defer fake.setActiveScheduleMutex.RUnlock()
	fake.removeActiveScheduleMutex.RLock()
	defer fake.removeActiveScheduleMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeScalingEngine) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ scalingengine.ScalingEngine = new(FakeScalingEngine)
